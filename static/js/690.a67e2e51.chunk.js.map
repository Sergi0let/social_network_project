{"version":3,"file":"static/js/690.a67e2e51.chunk.js","mappings":"8JACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,SCOjN,EAJgB,SAACA,GACf,OAAO,gBAAKC,UAAWC,EAAU,SAAEF,EAAMG,SAC3C,E,UCQA,EATmB,SAACH,GAClB,IAAII,EAAI,mBAAeJ,EAAMK,IAC7B,OACE,gBAAKJ,UAAWC,EAAS,UACvB,SAAC,KAAO,CAACI,GAAIF,EAAK,SAAEJ,EAAMO,QAGhC,E,uCCwBMC,GAAcC,EAAAA,EAAAA,GAAiB,IAkB/BC,GAAsBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,wBAAlBD,EAhBL,SAACX,GACtB,OACE,kBAAMa,SAAUb,EAAMc,aAAa,WACjC,SAACC,EAAA,EAAK,CACJC,UAAWC,EAAAA,GACXV,KAAK,iBACLW,YAAY,qBACZC,SAAU,CAACC,EAAAA,EAAeZ,MAE5B,0BACE,yCAIR,IAMA,EAhDgB,SAACR,GACf,IAAMqB,EAAkBrB,EAAMsB,YAAYC,KAAI,SAACC,GAAM,OACnD,SAAC,EAAU,CAACjB,KAAMiB,EAAOjB,KAAMF,GAAImB,EAAOnB,IAASmB,EAAOnB,GAAM,IAG5DoB,EAAmBzB,EAAM0B,aAAaH,KAAI,SAACpB,GAAO,OACtD,SAAC,EAAO,CAACA,QAASA,EAAQA,QAASE,GAAIF,EAAQE,IAASF,EAAQE,GAAM,IAOxE,OACE,+BACE,iBAAKJ,UAAWC,EAAU,WACxB,gBAAKD,UAAWC,EAAe,SAAEmB,KACjC,iBAAKpB,UAAWC,EAAW,WACzB,yBAAMuB,KACN,SAACf,EAAmB,CAACG,SAVP,SAACc,GACrB3B,EAAM4B,YAAYD,EAAOE,eAC3B,WAaF,E,8BCZA,GAAeC,E,QAAAA,KACbC,EAAAA,EAAAA,KAhBoB,SAACC,GACrB,MAAO,CACLC,OAAQD,EAAME,KAAKD,OACnBX,YAAaU,EAAMG,YAAYb,YAC/BI,aAAcM,EAAMG,YAAYT,aAChCG,eAAgBG,EAAMG,YAAYN,eAEtC,IAE2B,SAACO,GAC1B,MAAO,CACLR,YAAa,SAACC,GAAc,OAAKO,GAASR,EAAAA,EAAAA,GAAYC,GAAgB,EAE1E,IAIEQ,EAAAA,EAFF,CAGEC,E,4ECrBEC,EAA6B,SAACP,GAChC,MAAO,CACLC,OAAQD,EAAME,KAAKD,OAEvB,EAeA,IAbyB,SAACO,GAUxB,OAJqCT,EAAAA,EAAAA,IAAQQ,EAARR,EALb,SAAC/B,GACvB,OAAKA,EAAMiC,QACJ,SAACO,GAAS,UAAKxC,KADI,SAAC,KAAQ,CAACM,GAAG,UAEzC,GAOF,C","sources":["webpack://social/./src/components/Dialogs/Dialogs.module.scss?d037","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/WithAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__RWpWE\",\"dialogsItems\":\"Dialogs_dialogsItems__W5Scf\",\"active\":\"Dialogs_active__NJi65\",\"dialog\":\"Dialogs_dialog__UxhVW\",\"messages\":\"Dialogs_messages__7PEVX\",\"message\":\"Dialogs_message__zQstI\"};","import React from 'react';\n\nimport s from './../Dialogs.module.scss';\n\nconst Message = (props) => {\n  return <div className={s.message}>{props.message}</div>;\n};\n\nexport default Message;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport s from './../Dialogs.module.scss';\n\nconst DialogItem = (props) => {\n  let path = `/dialogs/${props.id}`;\n  return (\n    <div className={s.dialog}>\n      <NavLink to={path}>{props.name}</NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import React from 'react';\n\nimport Message from './Message/Message';\nimport DialogItem from './DialogItem/DialogsItem';\n\nimport s from './Dialogs.module.scss';\nimport { Field, reduxForm } from 'redux-form';\nimport { Textarea } from '../common/FormsControls/FormsControls';\nimport { requiredField, maxLengthCreator } from '../../validation/validators';\n\nconst Dialogs = (props) => {\n  const dialogsElements = props.dialogsData.map((dialog) => (\n    <DialogItem name={dialog.name} id={dialog.id} key={dialog.id} />\n  ));\n\n  const messagesElements = props.messagesData.map((message) => (\n    <Message message={message.message} id={message.id} key={message.id} />\n  ));\n\n  const addNewMessage = (values) => {\n    props.sendMessage(values.newMessageBody);\n  };\n\n  return (\n    <>\n      <div className={s.dialogs}>\n        <div className={s.dialogsItems}>{dialogsElements}</div>\n        <div className={s.messages}>\n          <div>{messagesElements}</div>\n          <AddMessageFormRedux onSubmit={addNewMessage} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst maxLength15 = maxLengthCreator(15);\n\nconst AddMessageForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <Field\n        component={Textarea}\n        name=\"newMessageBody\"\n        placeholder=\"Enter you message.\"\n        validate={[requiredField, maxLength15]}\n      />\n      <div>\n        <button>Send</button>\n      </div>\n    </form>\n  );\n};\n\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(\n  AddMessageForm\n);\n\nexport default Dialogs;\n","import Dialogs from './Dialogs';\nimport { connect } from 'react-redux';\n\nimport { sendMessage } from '../../redux/dialogsReducer.js';\nimport withAuthRedirect from '../../hoc/WithAuthRedirect';\nimport { compose } from 'redux';\n\nlet mapStateToProps = (state) => {\n  return {\n    isAuth: state.auth.isAuth,\n    dialogsData: state.messagePage.dialogsData,\n    messagesData: state.messagePage.messagesData,\n    newMessageBody: state.messagePage.newMessageBody,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessageBody) => dispatch(sendMessage(newMessageBody)),\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nlet mapStateToPropsForRedirect = (state) => {\n  return {\n    isAuth: state.auth.isAuth,\n  };\n};\n\nconst withAuthRedirect = (Component) => {\n  let RedirectComponent = (props) => {\n    if (!props.isAuth) return <Navigate to=\"/login\" />;\n    return <Component {...props} />;\n  };\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\n    RedirectComponent\n  );\n\n  return ConnectedAuthRedirectComponent;\n};\n\nexport default withAuthRedirect;\n\n// Class type\n//\n// export const withAuthRedirect = (Component) => {\n//   class RedirectComponent extends React.Component {\n//     render() {\n//       if (!this.props.isAuth) return <Navigate to=\"/login\" />;\n//       return <Component {...this.props} />;\n//     }\n//   }\n//   return RedirectComponent;\n// };\n"],"names":["props","className","s","message","path","id","to","name","maxLength15","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","dialogsElements","dialogsData","map","dialog","messagesElements","messagesData","values","sendMessage","newMessageBody","compose","connect","state","isAuth","auth","messagePage","dispatch","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","Component"],"sourceRoot":""}